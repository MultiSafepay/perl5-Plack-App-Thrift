package Plack::App::Thrift;
use strict;
use warnings;
use parent qw/Plack::Component/;

our $VERSION = '0.01';

use Thrift::BinaryProtocol;
use Plack::App::Thrift::HandleTransport;
use Plack::App::Thrift::MemoryTransport;

use Plack::Util::Accessor qw( processor );

sub call {
    my $self = shift;
    my $env  = shift;

    if ($env->{REQUEST_METHOD} ne 'POST') {
        return _error($env, 415, 'Method Not Allowed');
    }

    if (!$env->{CONTENT_TYPE} || $env->{CONTENT_TYPE} !~ m{application/x-thrift} || !$env->{CONTENT_LENGTH}) {
        return _error($env, 400, 'Bad Request');
    }

    my ($protocol) = $env->{CONTENT_TYPE} =~ m{application/x-thrift; protocol=(.*)};
    $protocol //= 'TBINARY';

    if ($protocol ne 'TBINARY') {
        return _error($env, 400, 'Bad Request');
    }

    my $output     = '';
    my $itransport = Plack::App::Thrift::HandleTransport->new($env->{'psgi.input'});
    my $otransport = Plack::App::Thrift::MemoryTransport->new(\$output);
    my $iprotocol  = Thrift::BinaryProtocol->new($itransport);
    my $oprotocol  = Thrift::BinaryProtocol->new($otransport);

    eval {
        $self->processor->process($iprotocol, $oprotocol);

        1;
    } or do {
        use Data::Dumper; warn Dumper($@);
        return _error($env, 500, 'Internal Server Error');
    };

    return [ 200, [ 'Content-type' => 'application/x-thrift', 'Content-Length' => length($output) ], [$output] ];
}

sub _error {
    my ($env, $code, $message) = @_;

    #$env->{'psgi.errors'}->print("$message");

    return [ $code, [ 'Content-type' => 'text/html', 'Content-Length' => length($message) ], [$message] ];
}

1;
__END__

=head1 NAME

Plack::App::Thrift - Thrift over HTTP & automatic docs

=head1 SYNOPSIS

    my $processor = MyThriftServiceProcessor->new();

    my $psgi = builder {
        mount '/'     => Plack::App::Thrift->new(processor => $processor);
        mount '/docs' => Plack::App::Thrift::Docs->new(thrift_json_file => '.json');
    };

=head1 DESCRIPTION

L<Plack::App::Thrift> and L<Plack::App::Thrift::Docs> implement a Thrift over HTTP and generate automatic documentation
for your service.

A fully functioning test application can be found in C<examples/> directory.

=head1 ATTRIBUTES

=head2 C<processor>

A typical Thrift processor that is generated by the C<thrift> command.

    thrift -r --gen perl .thrift

=head1 CREDITS

=head1 AUTHOR

Viacheslav Tykhanovskyi, C<vti@cpan.org>.

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2021, MultiSafepay B.V.

This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.

=cut
